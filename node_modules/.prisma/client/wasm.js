
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone_number: 'phone_number',
  profile_photo: 'profile_photo',
  valid_id: 'valid_id',
  user_location: 'user_location',
  created_at: 'created_at',
  is_verified: 'is_verified',
  verification_status: 'verification_status',
  rejection_reason: 'rejection_reason',
  verification_submitted_at: 'verification_submitted_at',
  verification_reviewed_at: 'verification_reviewed_at',
  password: 'password',
  userName: 'userName',
  is_activated: 'is_activated',
  birthday: 'birthday',
  exact_location: 'exact_location',
  user_reason: 'user_reason'
};

exports.Prisma.ServiceProviderDetailsScalarFieldEnum = {
  provider_id: 'provider_id',
  provider_first_name: 'provider_first_name',
  provider_last_name: 'provider_last_name',
  provider_email: 'provider_email',
  provider_phone_number: 'provider_phone_number',
  provider_profile_photo: 'provider_profile_photo',
  provider_valid_id: 'provider_valid_id',
  provider_isVerified: 'provider_isVerified',
  verification_status: 'verification_status',
  rejection_reason: 'rejection_reason',
  verification_submitted_at: 'verification_submitted_at',
  verification_reviewed_at: 'verification_reviewed_at',
  created_at: 'created_at',
  provider_rating: 'provider_rating',
  provider_location: 'provider_location',
  provider_uli: 'provider_uli',
  provider_password: 'provider_password',
  provider_userName: 'provider_userName',
  provider_isActivated: 'provider_isActivated',
  provider_birthday: 'provider_birthday',
  provider_exact_location: 'provider_exact_location',
  provider_reason: 'provider_reason'
};

exports.Prisma.CertificateScalarFieldEnum = {
  certificate_id: 'certificate_id',
  certificate_name: 'certificate_name',
  certificate_file_path: 'certificate_file_path',
  expiry_date: 'expiry_date',
  provider_id: 'provider_id',
  certificate_number: 'certificate_number',
  certificate_status: 'certificate_status',
  created_at: 'created_at',
  certificate_reason: 'certificate_reason'
};

exports.Prisma.ServiceListingScalarFieldEnum = {
  service_id: 'service_id',
  service_title: 'service_title',
  service_description: 'service_description',
  service_startingprice: 'service_startingprice',
  provider_id: 'provider_id',
  servicelisting_isActive: 'servicelisting_isActive',
  warranty: 'warranty'
};

exports.Prisma.ServicePhotoScalarFieldEnum = {
  id: 'id',
  imageUrl: 'imageUrl',
  service_id: 'service_id',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  category_id: 'category_id',
  category_name: 'category_name'
};

exports.Prisma.ProviderProfessionScalarFieldEnum = {
  id: 'id',
  provider_id: 'provider_id',
  profession: 'profession',
  experience: 'experience'
};

exports.Prisma.SpecificServiceScalarFieldEnum = {
  specific_service_id: 'specific_service_id',
  specific_service_title: 'specific_service_title',
  specific_service_description: 'specific_service_description',
  service_id: 'service_id',
  category_id: 'category_id'
};

exports.Prisma.CoveredServiceScalarFieldEnum = {
  covered_service_id: 'covered_service_id',
  specific_service_id: 'specific_service_id',
  certificate_id: 'certificate_id'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  availability_id: 'availability_id',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  provider_id: 'provider_id',
  availability_isActive: 'availability_isActive'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  appointment_id: 'appointment_id',
  customer_id: 'customer_id',
  provider_id: 'provider_id',
  appointment_status: 'appointment_status',
  scheduled_date: 'scheduled_date',
  repairDescription: 'repairDescription',
  created_at: 'created_at',
  final_price: 'final_price',
  availability_id: 'availability_id',
  service_id: 'service_id',
  cancellation_reason: 'cancellation_reason',
  warranty_days: 'warranty_days',
  finished_at: 'finished_at',
  completed_at: 'completed_at',
  warranty_expires_at: 'warranty_expires_at',
  warranty_paused_at: 'warranty_paused_at',
  warranty_remaining_days: 'warranty_remaining_days'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  rating_value: 'rating_value',
  rating_comment: 'rating_comment',
  rating_photo: 'rating_photo',
  appointment_id: 'appointment_id',
  user_id: 'user_id',
  provider_id: 'provider_id',
  rated_by: 'rated_by',
  created_at: 'created_at'
};

exports.Prisma.OTPVerificationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  expires_at: 'expires_at',
  created_at: 'created_at',
  verified: 'verified'
};

exports.Prisma.AdminScalarFieldEnum = {
  admin_id: 'admin_id',
  admin_username: 'admin_username',
  admin_email: 'admin_email',
  admin_password: 'admin_password',
  admin_name: 'admin_name',
  admin_role: 'admin_role',
  created_at: 'created_at',
  last_login: 'last_login',
  is_active: 'is_active',
  must_change_password: 'must_change_password'
};

exports.Prisma.ConversationScalarFieldEnum = {
  conversation_id: 'conversation_id',
  customer_id: 'customer_id',
  provider_id: 'provider_id',
  status: 'status',
  warranty_expires: 'warranty_expires',
  last_message_at: 'last_message_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessageScalarFieldEnum = {
  message_id: 'message_id',
  conversation_id: 'conversation_id',
  sender_id: 'sender_id',
  sender_type: 'sender_type',
  message_type: 'message_type',
  content: 'content',
  attachment_url: 'attachment_url',
  is_read: 'is_read',
  is_edited: 'is_edited',
  edited_at: 'edited_at',
  replied_to_id: 'replied_to_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BackjobApplicationScalarFieldEnum = {
  backjob_id: 'backjob_id',
  appointment_id: 'appointment_id',
  customer_id: 'customer_id',
  provider_id: 'provider_id',
  status: 'status',
  reason: 'reason',
  evidence: 'evidence',
  provider_dispute_reason: 'provider_dispute_reason',
  provider_dispute_evidence: 'provider_dispute_evidence',
  customer_cancellation_reason: 'customer_cancellation_reason',
  admin_notes: 'admin_notes',
  resolved_at: 'resolved_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PushTokenScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  user_type: 'user_type',
  expo_push_token: 'expo_push_token',
  device_platform: 'device_platform',
  device_name: 'device_name',
  device_os_version: 'device_os_version',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  last_used_at: 'last_used_at'
};

exports.Prisma.ReportScalarFieldEnum = {
  report_id: 'report_id',
  reporter_name: 'reporter_name',
  reporter_email: 'reporter_email',
  reporter_phone: 'reporter_phone',
  reporter_type: 'reporter_type',
  user_id: 'user_id',
  report_type: 'report_type',
  subject: 'subject',
  description: 'description',
  attachment_urls: 'attachment_urls',
  priority: 'priority',
  status: 'status',
  admin_notes: 'admin_notes',
  resolved_at: 'resolved_at',
  resolved_by: 'resolved_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  ServiceProviderDetails: 'ServiceProviderDetails',
  Certificate: 'Certificate',
  ServiceListing: 'ServiceListing',
  ServicePhoto: 'ServicePhoto',
  ServiceCategory: 'ServiceCategory',
  ProviderProfession: 'ProviderProfession',
  SpecificService: 'SpecificService',
  CoveredService: 'CoveredService',
  Availability: 'Availability',
  Appointment: 'Appointment',
  Rating: 'Rating',
  OTPVerification: 'OTPVerification',
  Admin: 'Admin',
  Conversation: 'Conversation',
  Message: 'Message',
  BackjobApplication: 'BackjobApplication',
  PushToken: 'PushToken',
  Report: 'Report'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
